// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiketsApp;

#nullable disable

namespace TiketsApp.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20250510152320_Event4")]
    partial class Event4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventImage", b =>
                {
                    b.Property<int>("EmagesId")
                        .HasColumnType("int");

                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.HasKey("EmagesId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("EventImage");
                });

            modelBuilder.Entity("TiketsApp.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ElementsInCategory")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("StartAge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TiketsApp.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RootCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SeatMap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RootCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TiketsApp.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("TiketsApp.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BannedByAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AllRoles");

                    b.HasDiscriminator().HasValue("Role");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TiketsApp.Models.Admin", b =>
                {
                    b.HasBaseType("TiketsApp.Models.Role");

                    b.Property<bool?>("HasAllPermissions")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("TiketsApp.Models.Saller", b =>
                {
                    b.HasBaseType("TiketsApp.Models.Role");

                    b.Property<bool?>("IsNowRegister")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Saller");
                });

            modelBuilder.Entity("TiketsApp.Models.User", b =>
                {
                    b.HasBaseType("TiketsApp.Models.Role");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("EventImage", b =>
                {
                    b.HasOne("TiketsApp.Models.Image", null)
                        .WithMany()
                        .HasForeignKey("EmagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiketsApp.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TiketsApp.Models.Category", b =>
                {
                    b.HasOne("TiketsApp.Models.Category", "Parent")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TiketsApp.Models.Event", b =>
                {
                    b.HasOne("TiketsApp.Models.Category", "RootCategory")
                        .WithMany("Events")
                        .HasForeignKey("RootCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiketsApp.Models.Category", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RootCategory");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("TiketsApp.Models.Category", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
